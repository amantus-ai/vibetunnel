import { afterAll, beforeAll, describe, expect, it } from 'vitest';
import { startTestServer, stopServer, cleanupTestDirectories, type ServerInstance } from '../utils/server-utils';

describe('Server Smoke Test', () => {
  let server: ServerInstance;
  let serverPort: number;

  beforeAll(async () => {
    // Start server using the new utility
    server = await startTestServer({
      args: ['--port', '0', '--no-auth'],
      serverType: 'SERVER',
      logOutput: true,
    });
    
    serverPort = server.port;
    console.log(`Server started on port ${serverPort}`);
  });

  afterAll(async () => {
    // Simple cleanup using utilities
    await stopServer(server.process);
    await cleanupTestDirectories([server.controlDir]);
  });

  it('should respond to health check', async () => {
    const response = await fetch(`http://localhost:${serverPort}/api/health`);
    expect(response.status).toBe(200);
    
    const data = await response.json();
    expect(data).toHaveProperty('status', 'healthy');
  });

  it('should serve the web interface', async () => {
    const response = await fetch(`http://localhost:${serverPort}/`);
    expect(response.status).toBe(200);
    
    const contentType = response.headers.get('content-type');
    expect(contentType).toContain('text/html');
  });

  it('should handle API requests without auth', async () => {
    const response = await fetch(`http://localhost:${serverPort}/api/sessions`);
    expect(response.status).toBe(200);
    
    const sessions = await response.json();
    expect(Array.isArray(sessions)).toBe(true);
  });

  it('should support WebSocket connections', async () => {
    const ws = new WebSocket(`ws://localhost:${serverPort}/ws`);
    
    await new Promise<void>((resolve, reject) => {
      ws.on('open', () => {
        ws.close();
        resolve();
      });
      ws.on('error', reject);
      
      setTimeout(() => reject(new Error('WebSocket connection timeout')), 5000);
    });
  });
});
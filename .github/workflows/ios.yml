name: iOS CI

on:
  workflow_call:

permissions:
  contents: read
  pull-requests: write
  issues: write

# All jobs run in parallel for faster CI execution
jobs:
  lint:
    name: Lint iOS Code
    runs-on: [self-hosted, macOS, ARM64]
    
    steps:
    - name: Clean workspace
      run: |
        # Clean workspace for self-hosted runner
        rm -rf * || true
        rm -rf .* || true
        
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Select Xcode 16.3
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.3'
    
    - name: Verify Xcode
      run: |
        xcodebuild -version
        swift --version
    
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('ios/VibeTunnel-iOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Install linting tools via Brewfile
      continue-on-error: true
      shell: bash
      run: |
        cat > Brewfile <<EOF
        brew "swiftlint"
        brew "swiftformat"
        EOF
        brew bundle --no-lock
        
        # Show final status
        echo "SwiftLint: $(which swiftlint || echo 'not found')"
        echo "SwiftFormat: $(which swiftformat || echo 'not found')"
        
    - name: Run SwiftFormat (check mode)
      id: swiftformat
      continue-on-error: true
      run: |
        cd ios
        swiftformat . --lint 2>&1 | tee ../swiftformat-output.txt
        echo "result=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
      
    - name: Run SwiftLint
      id: swiftlint
      continue-on-error: true
      run: |
        cd ios
        swiftlint 2>&1 | tee ../swiftlint-output.txt
        echo "result=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        
    - name: Read SwiftFormat Output
      if: always()
      id: swiftformat-output
      run: |
        if [ -f swiftformat-output.txt ]; then
          echo 'content<<EOF' >> $GITHUB_OUTPUT
          cat swiftformat-output.txt >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        else
          echo "content=No output" >> $GITHUB_OUTPUT
        fi
        
    - name: Read SwiftLint Output
      if: always()
      id: swiftlint-output
      run: |
        if [ -f swiftlint-output.txt ]; then
          echo 'content<<EOF' >> $GITHUB_OUTPUT
          cat swiftlint-output.txt >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        else
          echo "content=No output" >> $GITHUB_OUTPUT
        fi
        
    - name: Report SwiftFormat Results
      if: always()
      uses: ./.github/actions/lint-reporter
      with:
        title: 'iOS Formatting (SwiftFormat)'
        lint-result: ${{ steps.swiftformat.outputs.result == '0' && 'success' || 'failure' }}
        lint-output: ${{ steps.swiftformat-output.outputs.content }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Report SwiftLint Results
      if: always()
      uses: ./.github/actions/lint-reporter
      with:
        title: 'iOS Linting (SwiftLint)'
        lint-result: ${{ steps.swiftlint.outputs.result == '0' && 'success' || 'failure' }}
        lint-output: ${{ steps.swiftlint-output.outputs.content }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build iOS App
    runs-on: [self-hosted, macOS, ARM64]
    # Run in parallel with lint
    timeout-minutes: 30
    
    steps:
    - name: Clean workspace
      run: |
        # Clean workspace for self-hosted runner
        rm -rf * || true
        rm -rf .* || true
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Select Xcode 16.3
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.3'
    
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('ios/VibeTunnel-iOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
        
    - name: Install build tools
      run: |
        gem install xcpretty

    - name: Resolve Dependencies
      run: |
        echo "Resolving iOS package dependencies..."
        xcodebuild -resolvePackageDependencies -workspace VibeTunnel.xcworkspace -parallel || echo "Dependency resolution completed"
        
    - name: Show build settings
      run: |
        xcodebuild -showBuildSettings -workspace VibeTunnel.xcworkspace -scheme VibeTunnel-iOS -destination "generic/platform=iOS" || true
        
    - name: Build iOS app
      run: |
        set -o pipefail
        xcodebuild build \
          -workspace VibeTunnel.xcworkspace \
          -scheme VibeTunnel-iOS \
          -destination "generic/platform=iOS" \
          -configuration Release \
          -showBuildTimingSummary \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO \
          -derivedDataPath ios/build/DerivedData \
          COMPILER_INDEX_STORE_ENABLE=NO \
          2>&1 | tee build.log | xcpretty || {
            echo "Build failed. Last 100 lines of output:"
            tail -100 build.log
            exit 1
          }

    - name: List build products
      if: always()
      run: |
        echo "Searching for iOS build products..."
        find ios/build -name "*.app" -type d 2>/dev/null || echo "No build products found"
        ls -la ios/build/DerivedData/Build/Products/ 2>/dev/null || echo "Build products directory not found"
        # Also check workspace-level build directory
        ls -la build/DerivedData/Build/Products/ 2>/dev/null || echo "Workspace build products directory not found"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ios-build-artifacts
        path: ios/build/DerivedData/Build/Products/Release-iphoneos/
        retention-days: 7

  test:
    name: Test iOS App
    runs-on: [self-hosted, macOS, ARM64]
    # Run in parallel with lint and build
    timeout-minutes: 15
    
    steps:
    - name: Clean workspace
      run: |
        # Clean workspace for self-hosted runner
        rm -rf * || true
        rm -rf .* || true
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Select Xcode 16.3
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.3'
    
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('ios/VibeTunnel-iOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
        
    - name: Install test tools
      run: |
        gem install xcpretty

    - name: Resolve Test Dependencies
      run: |
        echo "Resolving dependencies for tests..."
        xcodebuild -resolvePackageDependencies -workspace VibeTunnel.xcworkspace -parallel || echo "Dependency resolution completed"
        
    - name: Create and boot simulator
      run: |
        echo "Creating iOS simulator for tests..."
        # List available runtimes
        echo "Available runtimes:"
        xcrun simctl list runtimes
        
        # Get the latest iOS runtime
        RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | tail -1 | awk '{print $NF}')
        echo "Using runtime: $RUNTIME"
        
        # List available device types
        echo "Available device types:"
        xcrun simctl list devicetypes | grep iPhone
        
        # Create a new simulator
        SIMULATOR_ID=$(xcrun simctl create "Test iPhone" "iPhone 15" "$RUNTIME" || xcrun simctl create "Test iPhone" "com.apple.CoreSimulator.SimDeviceType.iPhone-15" "$RUNTIME")
        echo "Created simulator: $SIMULATOR_ID"
        
        # Boot the simulator
        xcrun simctl boot "$SIMULATOR_ID" || echo "Simulator already booted"
        echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
        
    - name: Run iOS tests
      run: |
        echo "Running iOS tests using Swift Testing framework..."
        set -o pipefail
        xcodebuild test \
          -workspace VibeTunnel.xcworkspace \
          -scheme VibeTunnel-iOS \
          -destination "platform=iOS Simulator,id=$SIMULATOR_ID" \
          -resultBundlePath ios/TestResults.xcresult \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          COMPILER_INDEX_STORE_ENABLE=NO \
          -quiet \
          2>&1 | xcpretty || {
            echo "::error::iOS tests failed"
            # Shutdown simulator
            xcrun simctl shutdown "$SIMULATOR_ID" || true
            exit 1
          }
        
        # Shutdown simulator
        xcrun simctl shutdown "$SIMULATOR_ID" || true
        
    - name: Extract coverage summary
      if: always()
      id: coverage
      run: |
        cd ios
        if [ -f TestResults.xcresult ]; then
          # Use faster xcrun command to extract coverage percentage
          COVERAGE_PCT=$(xcrun xccov view --report --json TestResults.xcresult 2>/dev/null | jq -r '.lineCoverage // 0' | awk '{printf "%.1f", $1 * 100}') || {
            echo "::warning::Failed to extract coverage with xccov"
            echo '{"error": "Failed to extract coverage data"}' > coverage-summary.json
            echo "coverage_result=failure" >> $GITHUB_OUTPUT
            exit 0
          }
          
          # Create minimal summary JSON
          echo "{\"coverage\": \"$COVERAGE_PCT\"}" > coverage-summary.json
          
          echo "Coverage: ${COVERAGE_PCT}%"
          
          # Check if coverage meets threshold (75% for Swift projects)
          THRESHOLD=75
          if (( $(echo "$COVERAGE_PCT >= $THRESHOLD" | bc -l) )); then
            echo "coverage_result=success" >> $GITHUB_OUTPUT
          else
            echo "coverage_result=failure" >> $GITHUB_OUTPUT
          fi
        else
          echo '{"error": "No test results bundle found"}' > coverage-summary.json
          echo "coverage_result=failure" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload coverage artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-coverage
        path: |
          ios/coverage-summary.json
          ios/TestResults.xcresult
        retention-days: 1
        
    - name: Upload test logs on failure
      if: failure()
      run: |
        echo "Tests failed. Check the logs above for details."
        # Swift Testing doesn't produce xcresult bundles with run-tests.sh

  report-coverage:
    name: Report iOS Coverage
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && github.event_name == 'pull_request'

    steps:
    - name: Clean workspace
      run: |
        # Clean workspace for self-hosted runner
        rm -rf * || true
        rm -rf .* || true
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: ios-coverage
        path: ios-coverage-artifacts

    - name: Read coverage summary
      id: coverage
      run: |
        if [ -f ios-coverage-artifacts/coverage-summary.json ]; then
          # Read the coverage summary
          COVERAGE_JSON=$(cat ios-coverage-artifacts/coverage-summary.json)
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$COVERAGE_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Extract coverage percentage
          COVERAGE_PCT=$(echo "$COVERAGE_JSON" | jq -r '.coverage // 0')
          
          # Check if coverage meets threshold (75% for Swift)
          THRESHOLD=75
          if (( $(echo "$COVERAGE_PCT >= $THRESHOLD" | bc -l) )); then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
          fi
          
          # Format output with warning indicator if below threshold
          if (( $(echo "$COVERAGE_PCT < $THRESHOLD" | bc -l) )); then
            echo "output=• Coverage: ${COVERAGE_PCT}% ⚠️ (threshold: ${THRESHOLD}%)" >> $GITHUB_OUTPUT
          else
            echo "output=• Coverage: ${COVERAGE_PCT}% (threshold: ${THRESHOLD}%)" >> $GITHUB_OUTPUT
          fi
        else
          echo "summary={\"error\": \"No coverage data found\"}" >> $GITHUB_OUTPUT
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "output=Coverage data not found" >> $GITHUB_OUTPUT
        fi

    - name: Report Coverage Results
      uses: ./.github/actions/lint-reporter
      with:
        title: 'iOS Test Coverage'
        lint-result: ${{ steps.coverage.outputs.result }}
        lint-output: ${{ steps.coverage.outputs.output }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
name: Xcode SEA Build Test

on:
  push:
    branches: [ main, ms-pty ]
    paths:
      - 'web/**'
      - 'mac/**'
      - '.github/workflows/xcode-sea-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'web/**'
      - 'mac/**'
      - '.github/workflows/xcode-sea-test.yml'
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node.js version to build'
        required: false
        default: '24.2.0'
        type: string

env:
  NODE_VERSION: ${{ github.event.inputs.node_version || '24.2.0' }}
  XCODE_VERSION: '16.0'

jobs:
  build-custom-node-mac:
    name: Build Custom Node.js for macOS
    runs-on: self-hosted
    outputs:
      node-path: ${{ steps.node-info.outputs.path }}
      node-size: ${{ steps.node-info.outputs.size }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          # Ensure Xcode is selected
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          
          # Install ninja if not present
          if ! command -v ninja &> /dev/null; then
            brew install ninja
          fi

      - name: Cache custom Node.js build
        id: cache-custom-node
        uses: actions/cache@v4
        with:
          path: |
            web/.node-builds/node-v${{ env.NODE_VERSION }}-minimal
          key: custom-node-macos-${{ runner.arch }}-v${{ env.NODE_VERSION }}-${{ hashFiles('web/build-custom-node.js') }}
          restore-keys: |
            custom-node-macos-${{ runner.arch }}-v${{ env.NODE_VERSION }}-

      - name: Build custom Node.js
        if: steps.cache-custom-node.outputs.cache-hit != 'true'
        working-directory: web
        run: |
          node build-custom-node.js --version=${{ env.NODE_VERSION }}

      - name: Set Node.js info
        id: node-info
        working-directory: web
        run: |
          NODE_PATH="$(pwd)/.node-builds/node-v${{ env.NODE_VERSION }}-minimal/out/Release/node"
          echo "path=${NODE_PATH}" >> $GITHUB_OUTPUT
          
          if [ -f "${NODE_PATH}" ]; then
            NODE_SIZE=$(stat -f%z "${NODE_PATH}")
            echo "size=${NODE_SIZE}" >> $GITHUB_OUTPUT
            echo "Custom Node.js found at: ${NODE_PATH}"
            echo "Size: $(( ${NODE_SIZE} / 1024 / 1024 )) MB"
            ${NODE_PATH} --version
          else
            echo "ERROR: Custom Node.js not found!"
            exit 1
          fi

  test-xcode-build:
    name: Test Xcode Build with Custom Node
    needs: build-custom-node-mac
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcodebuild -version

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore custom Node.js from cache
        uses: actions/cache@v4
        with:
          path: |
            web/.node-builds/node-v${{ env.NODE_VERSION }}-minimal
          key: custom-node-macos-${{ runner.arch }}-v${{ env.NODE_VERSION }}-${{ hashFiles('web/build-custom-node.js') }}
          fail-on-cache-miss: true

      - name: Install web dependencies
        working-directory: web
        run: |
          pnpm install --frozen-lockfile

      - name: Build SEA executable with custom Node.js
        working-directory: web
        run: |
          CUSTOM_NODE="$(pwd)/.node-builds/node-v${{ env.NODE_VERSION }}-minimal/out/Release/node"
          echo "Building SEA with custom Node.js at: ${CUSTOM_NODE}"
          ${CUSTOM_NODE} --version
          
          # Build the SEA executable
          node build-native.js --custom-node="${CUSTOM_NODE}"
          
          # Verify the build
          echo "=== SEA Build Artifacts ==="
          ls -lah native/
          
          # Test the executable
          echo "=== Testing SEA Executable ==="
          ./native/vibetunnel --version || echo "Version flag not implemented"
          
          # Quick smoke test
          timeout 5s ./native/vibetunnel --help 2>&1 || true

      # Note: The Xcode build script (build-web-frontend.sh) will copy files from web/native/
      # to the correct location in the app bundle, so we don't need to pre-copy them

      - name: Resolve Xcode dependencies
        run: |
          echo "Resolving Swift package dependencies..."
          xcodebuild -resolvePackageDependencies -workspace VibeTunnel.xcworkspace || echo "Dependency resolution completed"

      - name: Build macOS app with Xcode
        run: |
          # Clean build directory
          rm -rf build/
          
          # Build the app (Debug configuration for faster builds in CI)
          xcodebuild \
            -workspace VibeTunnel.xcworkspace \
            -scheme VibeTunnel-Mac \
            -configuration Debug \
            -derivedDataPath build \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            PRODUCT_BUNDLE_IDENTIFIER="com.vibetunnel.test" \
            build
          
          # Find the built app
          APP_PATH=$(find build -name "VibeTunnel.app" -type d | head -n 1)
          echo "Built app at: ${APP_PATH}"
          
          # Verify the SEA executable is in the app bundle
          echo "=== Checking app bundle contents ==="
          ls -lah "${APP_PATH}/Contents/Resources/" | grep -E "(vibetunnel|pty.node|spawn-helper|authenticate_pam.node)" || true
          
          # Check if vibetunnel binary exists in the bundle
          if [ -f "${APP_PATH}/Contents/Resources/vibetunnel" ]; then
            echo "✓ SEA executable found in app bundle"
            
            # Test the binary from within the app bundle
            echo "=== Testing SEA from app bundle ==="
            "${APP_PATH}/Contents/Resources/vibetunnel" --version 2>&1 || echo "Version test failed"
          else
            echo "✗ SEA executable NOT found in app bundle!"
            echo "Contents of Resources directory:"
            ls -lah "${APP_PATH}/Contents/Resources/" || true
            exit 1
          fi

      - name: Test the built app
        working-directory: mac
        run: |
          APP_PATH=$(find build -name "VibeTunnel.app" -type d | head -n 1)
          
          # Basic app launch test (will fail if code signing is wrong)
          echo "=== Testing app launch ==="
          # Try to get app info
          defaults read "${APP_PATH}/Contents/Info.plist" CFBundleIdentifier || true
          defaults read "${APP_PATH}/Contents/Info.plist" CFBundleVersion || true
          
          # Check binary architecture
          echo "=== Checking architectures ==="
          lipo -info "${APP_PATH}/Contents/MacOS/VibeTunnel"
          lipo -info "${APP_PATH}/Contents/Resources/vibetunnel" || true
          
          # Size comparison
          echo "=== Size Analysis ==="
          echo "App size: $(du -sh "${APP_PATH}" | cut -f1)"
          if [ -f "${APP_PATH}/Contents/Resources/vibetunnel" ]; then
            echo "SEA executable: $(du -h "${APP_PATH}/Contents/Resources/vibetunnel" | cut -f1)"
          fi
          echo "Custom Node.js used: $(( ${{ needs.build-custom-node-mac.outputs.node-size }} / 1024 / 1024 )) MB"

      - name: Upload app artifact
        uses: actions/upload-artifact@v4
        with:
          name: VibeTunnel-macOS-SEA-${{ github.sha }}
          path: |
            mac/build/**/VibeTunnel.app
          retention-days: 7

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-build-logs-${{ github.sha }}
          path: |
            mac/build/**/Logs/Build/*.xcactivitylog
          retention-days: 7